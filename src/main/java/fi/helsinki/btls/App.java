/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fi.helsinki.btls;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import fi.helsinki.btls.domain.Beacon;
import fi.helsinki.btls.domain.LocationModel;
import fi.helsinki.btls.domain.ObservationModel;
import fi.helsinki.btls.domain.Observer;
import fi.helsinki.btls.services.*;
import fi.helsinki.btls.utils.PropertiesHandler;

public class App {
    public static void main(String[] args) {
        PropertiesHandler handler = new PropertiesHandler("config/mqttConfig.properties");

        String subscribeTopic = handler.getProperty("subscribeTopic");
        String publishTopic = handler.getProperty("publishTopic");
        String mqttUrl = handler.getProperty("mqttUrl");
        boolean debug = Boolean.parseBoolean(handler.getProperty("debug"));

        IMqttService mqttService = new MqttService(mqttUrl,subscribeTopic,publishTopic);

        int positionsDimension = 2;
        IObserverService observerService = new ObserverService(positionsDimension);
        Map<String, String> allProperties = new PropertiesHandler("config/rasps.properties").getAllProperties();
        List<Observer> all = new ArrayList<>();

        allProperties.forEach((key, value) -> {
            String[] rasp = value.split(":");
            double[] temp = new double[positionsDimension];

            for (int i = 0; i < positionsDimension; i++) {
                temp[i] = Double.parseDouble(rasp[i]);
            }

            Observer obs = new Observer(key);
            obs.setPosition(temp);
            all.add(obs);
        });

        if (!observerService.addAllObservers(all)) {
            return;
        }

        ILocationService service = new LocationService2D(observerService);
        while (true) {
            try {
                Thread.sleep(1000);
                List<Beacon> beacons;

                if (debug) {
                    beacons = createData();
                } else {
                    beacons = mqttService.getBeacons();
                }

                List<LocationModel> locations = service.calculateAllLocations(beacons);
                mqttService.publish(locations);
            } catch (Exception ex) {
                System.out.println(ex.toString());
            }
        }
    }

    private static List<Beacon> createData() {
        List<Beacon> beacons = new ArrayList<>();

        Beacon first = new Beacon("1");
        List<ObservationModel> obsFirst = first.getObservations();
        obsFirst.add(new ObservationModel("rasp-1", "1", -80));
        obsFirst.add(new ObservationModel("rasp-2", "1", -90));
        obsFirst.add(new ObservationModel("rasp-3", "1", -30));
        first.setObservations(obsFirst);

        Beacon second = new Beacon("2");
        List<ObservationModel> obsSecond = first.getObservations();
        obsSecond.add(new ObservationModel("rasp-1", "2", -70));
        obsSecond.add(new ObservationModel("rasp-2", "2", -50));
        obsSecond.add(new ObservationModel("rasp-3", "2", -60));
        obsSecond.add(new ObservationModel("rasp-2", "2", -75));
        second.setObservations(obsSecond);

        beacons.add(first);
        beacons.add(second);
        return beacons;
    }
}
